#!/usr/bin/env python3
"""
generate_transporter_report.py

Luo raportin simulaatiossa käytetyistä nostinparametreista.
Lukee Transporters.csv:n ja luo yhteenvetoraportin parametrit riveinä, nostimet sarakkeina.

Author: Simulation Pipeline
Version: 1.0
Date: 2025-08-05
"""

import pandas as pd
import os
from simulation_logger import get_logger


def generate_transporter_report(output_dir="output"):
    """
    Luo raportin simulaatiossa käytetyistä nostinparametreista.
    
    Args:
        output_dir: Path to the simulation output directory
        
    Returns:
        str: Path to saved report file
    """
    
    logger = get_logger()
    if logger is None:
        raise RuntimeError("Logger is not initialized. Please initialize logger in main pipeline before calling this function.")
    
    logger.log_data("Transporter report generation started")
    
    # Paths
    transporters_file = os.path.join(output_dir, "initialization", "transporters.csv")
    reports_dir = os.path.join(output_dir, "reports")
    report_file = os.path.join(reports_dir, "transporter_report.html")
    
    # Check if file exists
    if not os.path.exists(transporters_file):
        logger.log_error(f"Transporters file not found: {transporters_file}")
        raise FileNotFoundError(f"Transporters file not found: {transporters_file}")
    
    # Load transporter information
    transporters_df = pd.read_csv(transporters_file)
    
    logger.log_data(f"Found {len(transporters_df)} transporters")
    
    # Sort by transporter ID for consistent ordering
    transporters_df = transporters_df.sort_values('Transporter_id').reset_index(drop=True)
    
    # Get simulation directory name
    simulation_name = os.path.basename(os.path.abspath(output_dir))
    
    # Transpose data: parameters as rows, transporters as columns
    # First set Transporter_id as index, then transpose
    transporters_transposed = transporters_df.set_index('Transporter_id').T
    
    # Generate HTML report
    html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <title>Transporter Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        h1 {{ color: #2c3e50; text-align: center; }}
        table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}
        th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
        th {{ background-color: #f2f2f2; font-weight: bold; }}
        tr:nth-child(even) {{ background-color: #f9f9f9; }}
        .center {{ text-align: center; }}
        .parameter-name {{ font-weight: bold; }}
    </style>
</head>
<body>
    <h1>Used Transporter Parameters in Simulation {simulation_name}</h1>
    
    <table>
        <thead>
            <tr>
                <th>Parameter</th>"""
    
    # Add transporter columns headers
    for transporter_id in sorted(transporters_transposed.columns):
        html_content += f"""
                <th class="center">Transporter {transporter_id}</th>"""
    
    html_content += """
            </tr>
        </thead>
        <tbody>
"""
    
    # Add parameter rows
    for parameter in transporters_transposed.index:
        html_content += f"""
            <tr>
                <td class="parameter-name">{parameter}</td>"""
        
        for transporter_id in sorted(transporters_transposed.columns):
            value = transporters_transposed.loc[parameter, transporter_id]
            html_content += f"""
                <td class="center">{value}</td>"""
        
        html_content += """
            </tr>"""
    
    html_content += """
        </tbody>
    </table>
    
    <div style="margin-top: 30px; font-size: 12px; color: #666;">
        <p>Report generated by Simulation Pipeline</p>
        <p>Date: """ + pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S') + """</p>
    </div>
</body>
</html>
"""
    
    # Save HTML report
    os.makedirs(reports_dir, exist_ok=True)
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    # Also save as CSV for data analysis (transposed format)
    csv_report_file = os.path.join(reports_dir, "transporter_report.csv")
    # Reset index to make parameter names a column in CSV
    transporters_transposed_csv = transporters_transposed.reset_index()
    transporters_transposed_csv.to_csv(csv_report_file, index=False)
    
    logger.log_viz(f"Transporter report saved: {report_file}")
    logger.log_viz(f"Transporter CSV saved: {csv_report_file}")
    logger.log_data("Transporter report generation completed")
    
    return report_file


if __name__ == "__main__":
    import sys
    output_dir = sys.argv[1] if len(sys.argv) > 1 else "output"
    from simulation_logger import init_logger
    init_logger(output_dir)
    generate_transporter_report(output_dir)
