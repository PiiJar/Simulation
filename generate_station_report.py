#!/usr/bin/env python3
"""
generate_station_report.py

Luo raportin simulaatiossa k채ytetyist채 asematiedoista.
Lukee Stations.csv:n ja luo yhteenvetoraportin.

Author: Simulation Pipeline
Version: 1.0
Date: 2025-08-05
"""

import pandas as pd
import os
from simulation_logger import get_logger


def generate_station_report(output_dir="output"):
    """
    Luo raportin simulaatiossa k채ytetyist채 asematiedoista.
    
    Args:
        output_dir: Path to the simulation output directory
        
    Returns:
        str: Path to saved report file
    """
    
    logger = get_logger()
    if logger is None:
        raise RuntimeError("Logger is not initialized. Please initialize logger in main pipeline before calling this function.")
    
    logger.log_data("Station report generation started")
    
    # Paths
    stations_file = os.path.join(output_dir, "initialization", "Stations.csv")
    reports_dir = os.path.join(output_dir, "reports")
    report_file = os.path.join(reports_dir, "station_report.html")
    
    # Check if file exists
    if not os.path.exists(stations_file):
        logger.log_error(f"Stations file not found: {stations_file}")
        raise FileNotFoundError(f"Stations file not found: {stations_file}")
    
    # Load station information
    stations_df = pd.read_csv(stations_file)
    
    logger.log_data(f"Found {len(stations_df)} stations")
    
    # Sort by station number for consistent ordering
    stations_df = stations_df.sort_values('Number').reset_index(drop=True)
    
    # Get simulation directory name
    simulation_name = os.path.basename(os.path.abspath(output_dir))
    
    # Generate HTML report
    html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <title>Station Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        h1 {{ color: #2c3e50; text-align: center; }}
        table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}
        th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
        th {{ background-color: #f2f2f2; font-weight: bold; }}
        tr:nth-child(even) {{ background-color: #f9f9f9; }}
        .center {{ text-align: center; }}
    </style>
</head>
<body>
    <h1>Used Station Parameters in Simulation {simulation_name}</h1>
    
    <table>
        <thead>
            <tr>
                <th>Station Number</th>
                <th>Station Name</th>
                <th>X Position</th>
                <th>Dropping Time</th>
                <th>Station Type</th>
                <th>Device Delay</th>
            </tr>
        </thead>
        <tbody>
"""
    
    for _, row in stations_df.iterrows():
        html_content += f"""
            <tr>
                <td class="center">{int(row['Number'])}</td>
                <td>{row['Name']}</td>
                <td class="center">{row['X Position']}</td>
                <td class="center">{row['Dropping_Time']}</td>
                <td class="center">{row['Station_type']}</td>
                <td class="center">{row['Device_delay']}</td>
            </tr>
        """
    
    html_content += """
        </tbody>
    </table>
    
    <div style="margin-top: 30px; font-size: 12px; color: #666;">
        <p>Report generated by Simulation Pipeline</p>
        <p>Date: """ + pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S') + """</p>
    </div>
</body>
</html>
"""
    
    # Save HTML report
    os.makedirs(reports_dir, exist_ok=True)
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    # Also save as CSV for data analysis
    csv_report_file = os.path.join(reports_dir, "station_report.csv")
    stations_df.to_csv(csv_report_file, index=False)
    
    logger.log_viz(f"Station report saved: {report_file}")
    logger.log_viz(f"Station CSV saved: {csv_report_file}")
    logger.log_data("Station report generation completed")
    
    return report_file


if __name__ == "__main__":
    import sys
    output_dir = sys.argv[1] if len(sys.argv) > 1 else "output"
    from simulation_logger import init_logger
    init_logger(output_dir)
    generate_station_report(output_dir)
